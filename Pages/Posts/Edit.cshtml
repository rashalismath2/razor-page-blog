@page "{id}"
@model BlogSite.Pages.Posts.EditModel
@{
    ViewData["Title"] = "Edit Post";
}

<form method="POST" id="update-post-form" enctype="multipart/form-data">
    <div asp-validation-summary="ModelOnly" class="text-danger"> </div>
    <div class="form-outline mb-4">
        <label class="form-label" asp-for="Input.Title"></label>
        <div>
            <input asp-for="Input.Title" class="form-control" />
            <span asp-validation-for="Input.Title" class="text-danger"></span>
        </div>
    </div>
    <div class="form-outline mb-4">
        <img class="cover-image" src="@Model.Input.ExistingCoverImage" />
    </div>
    <div class="form-outline mb-4">
        <label class="form-label" asp-for="Input.CoverImage"></label>
        <div>
            <input type="file" accept="image/*" asp-for="Input.CoverImage" class="form-control" />
            <span asp-validation-for="Input.CoverImage" class="text-danger"></span>
        </div>
    </div>

    <div class="form-outline mb-4">
        <label class="form-label" asp-for="Input.Body"></label>
        <div>
            <textarea asp-for="Input.Body" class="form-control"></textarea>
            <span asp-validation-for="Input.Body" class="text-danger"></span>
        </div>
    </div>
    <div class="submit-container">
        <input type="Submit" class="btn btn-dark" value="Update Article" />
    </div>

</form>

<div id="gallery-container" class="mt-5">
</div>

@section Scripts{
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
    <script>
        tinymce.init({
            selector: 'textarea#Input_Body',
            height: 800,
            plugins: [
                'advlist', 'autolink', 'link', 'image', 'lists', 'charmap', 'preview',
                'anchor', 'pagebreak',
                'searchreplace', 'wordcount', 'visualblocks', 'visualchars', 'code',
                'fullscreen', 'insertdatetime',
                'media', 'table', 'emoticons', 'template', 'help'
            ],
            toolbar: 'undo redo | styles | bold italic | alignleft aligncenter alignright alignjustify | ' +
                'bullist numlist outdent indent | link image | print preview media fullscreen | ' +
                'forecolor backcolor emoticons | help',
            menu: {
                favs: {
                    title: 'My Favorites', items: 'code visualaid | ' + 'searchreplace | emoticons'
                }
            },
            menubar: 'favs file edit view insert format tools table help',
            content_css: 'css/content.css'
        });
    </script>

    <script type="text/babel">
        // Render your React component instead
        const root = ReactDOM.createRoot(document.getElementById('gallery-container'));

        function GalleryComponent(props){

            const [images,setImages]=React.useState([]);
            const [selectedImage, setSelectedImage] = React.useState(null);

            React.useEffect(()=>{
               fetch("https://localhost:7020/api/gallery")
               .then(res=>res.json())
               .then(res=>{
                   console.log(res)
                    setImages(res)
               })
               .catch(e=>{
                console.log(e)
               })

                const toastTrigger = document.getElementById('images-wrapper')
                const toastLiveExample = document.getElementById('liveToast')

                if (toastTrigger) {
                    const toastBootstrap = bootstrap.Toast.getOrCreateInstance(toastLiveExample)
                    toastTrigger.addEventListener('click', () => {
                        toastBootstrap.show()
                    })
                }


            },[])

            const uploadImages=()=>{
                     const formData = new FormData();

                    // Update the formData object
                    formData.append(
                      "image",
                      selectedImage,
                      selectedImage.name
                    );
                    // Request made to the backend api
                    // Send formData object
                    fetch("https://localhost:7020/api/gallery", {
                        method:"POST",
                        body:formData
                    })
                    .then(res=>res.json())
                    .then(res=>{
                        setImages([...images,res])
                        setSelectedImage(null)
                    });
            }

            return(
                <div id="comments-inner">
                    {
                       images.length<1?<div className="alert alert-secondary" role="alert">
                              You have not updated any images to the gallery yet!
                            </div>:null
                    }
                    <div id="images-container">
                        <h3>Gallery Images.</h3>
                        <div id="images-wrapper">
                             {
                                images.map(image=>{

                                    return (
                                        <div onClick={()=>{navigator.clipboard.writeText(image.url) }} key={image.id} id="image" className="image">
                                            <img src={image.url} />
                                        </div>
                                    )

                                })
                            }
                        </div>
                    </div>

                    <div id="upload-new-image">
                         <input
                              type="file"
                              className="form-control"
                              name="newImages"
                              accept="image/*"
                              onChange={(event) => {
                                setSelectedImage(event.target.files[0]);
                              }}
                            />
                          <button className="btn  btn-dark" disabled={selectedImage==null} onClick={uploadImages}>Upload</button>
                      </div>

                              <div class="toast-container position-fixed bottom-0 end-0 p-3">
                                  <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                                    <div className="toast-header">
                                      <i className="fa-sharp fa-regular fa-clipboard"></i>
                                      <strong className="me-auto ml-4">Copied!</strong>
                                      <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                                    </div>
                                  </div>
                               </div>

                </div>
            )
        }

        root.render(<GalleryComponent />);

    </script>

    }