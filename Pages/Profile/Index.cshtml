@page
@model BlogSite.Pages.Profile.IndexModel
@{
    ViewData["Title"] = "Profile";
}

<div class="container">
    <div class="row profile">
        <div class="col-md-3">
            <div class="profile-sidebar card">
                <!-- SIDEBAR USERPIC -->
                <div class="flex-shrink-0 profile-pic-container">
                    @if (string.IsNullOrWhiteSpace(Model.User.ProfileUrl))
                    {
                        <img class="img-md rounded-circle" src="https://bootdey.com/img/Content/avatar/avatar1.png" />
                    }
                    else
                    {
                        <img class="img-md rounded-circle" src="@Model.User.ProfileUrl" alt="Profile Picture" loading="lazy">
                    }
                </div>
                <!-- END SIDEBAR USERPIC -->
                <!-- SIDEBAR USER TITLE -->
                <div class="profile-usertitle">
                   @if (User.Identity.IsAuthenticated && User.Claims.ToList().FirstOrDefault((c) => c.Type == "Id").Value == Model.User.Id)
                    {
                        <div id="post-actions">
                            <a asp-page="Edit" asp-route-userId="@Model.User.Id">
                                <i class="fa-solid fa-pen"></i>
                            </a>
                        </div>
                    }
                    <div class="profile-usertitle-name">
                        @Model.User.FullName
                    </div>
                    <div class="profile-usertitle-job">
                        @Model.User.Email
                    </div>
                    <div class="profile-usertitle-job">
                        @if (Model.User.Followers is not null)
                        {
                            @Model.User.Followers.Count()
                        }
                        Followers.
                    </div>
                    <div class="profile-userbio">
                        @Model.User.Bio
                    </div>
                </div>
                <!-- END SIDEBAR USER TITLE -->
                <!-- SIDEBAR BUTTONS -->
                @if (User.Identity.IsAuthenticated && User.Claims.ToList().FirstOrDefault((c) => c.Type == "Id").Value != Model.userId)
                {
                    <div id="follow-button" class="profile-userbuttons">
                    </div>
                }
            </div>
        </div>
        <div class="col-md-9">
            <div class="profile-content">
                <div class="search-results">
                    @foreach (var post in Model.User.Articles)
                    {
                        <a class="mb-3 post-card-container" href="/posts/details/@post.Id">
                            <div class="card post-card">
                                <div class="card-body d-flex post-card-header">
                                    <div class="icon-lg rounded-3 text-white">
                                        <img class="post-card-user-image" src="@post.AppUser.ProfileUrl" />
                                    </div>
                                    <div class="ps-3">
                                        <h5 class="h6 post-card-user-name">@post.AppUser.FullName</h5>
                                        <p class="m-0 post-card-post-date">@post.CreatedDate.ToString("dd/mm/yyyy")</p>
                                    </div>
                                </div>
                                <div class="card post-card-body">
                                    <img src="@post.CoverImage" class="card-img-top" alt="...">
                                    <div class="card-body">
                                        <h5 class="card-title">@post.Title</h5>
                                    </div>
                                </div>
                            </div>

                        </a>
                    }
                </div>
                @if (Model.User.Articles.Count < 1)
                {
                    <div class="alert alert-secondary" role="alert">
                        No Post have been uploaded yet!
                    </div>
                }
            </div>
        </div>
    </div>
</div>
</div>


@section Scripts{
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>

    <script type="text/babel">
        // Render your React component instead
        const root = ReactDOM.createRoot(document.getElementById('follow-button'));

        function FollowContainer(props){
            const [isFollowing,setIsFollowing]=React.useState(false)
            const [targetUser,setTargetUser]=React.useState(null)

            React.useEffect(()=>{

               const params = new Proxy(new URLSearchParams(window.location.search), {
                      get: (searchParams, prop) => searchParams.get(prop),
               });
               let value = params.userId;
                setTargetUser(value)

               fetch("https://localhost:7020/api/followers/is-following?targetUserId="+value)
               .then(res=>res.json())
               .then(res=>{
                   setIsFollowing(res)
               })
               .catch(e=>{
                console.log(e)
               })

            },[])

            const unFollow=()=>{
                setIsFollowing(false)
                fetch("https://localhost:7020/api/followers/un-follow?targetUserId="+targetUser)
                   .then(res=>res.json())
                   .then(res=>{
                       setIsFollowing(res)
                   })
                   .catch(e=>{
                    console.log(e)
                   })
            }
            const Follow=()=>{
                setIsFollowing(true)
                fetch("https://localhost:7020/api/followers/follow?targetUserId="+targetUser)
                   .then(res=>res.json())
                   .then(res=>{
                       setIsFollowing(res)
                   })
                   .catch(e=>{
                    console.log(e)
                   })
            }

            return(
                <div id="following-button-inner">
                    {
                        isFollowing?<button onClick={unFollow} class="btn btn-success">Following</button>:<button onClick={Follow} class="btn btn-primary">Follow</button>
                    }
                </div>
            )
        }

        root.render(<FollowContainer />);

    </script>

}